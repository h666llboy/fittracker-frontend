// frontend/src/App.tsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { CircularProgressbar, buildStyles } from 'react-circular-progressbar';
import 'react-circular-progressbar/dist/styles.css';
import './App.css';
import ImportProgram from './ImportProgram';

/* - —Ç–∏–ø—ã - */
type Exercise = {
  id: number;
  name: string;
  tip: string | null;
  yt_search: string | null;
  sets: number;
  reps: number;
  weight: number;
};

type WorkoutProgram = {
  id: number;
  title: string;
  exercises: Exercise[];
};

type ShortProgram = {
  id: number;
  title: string;
  ex_count: number;
};

type FinishedWorkout = {
  id: number;
  finished_at: string;
  duration_sec: number;
  exercises_done: string[];
};

/* - –∞–¥—Ä–µ—Å –±—ç–∫–µ–Ω–¥–∞ –≤ –æ–±–ª–∞–∫–µ - */
const API_URL = 'https://fittracker-backend-ptcq.onrender.com'; // –£–ë–†–ê–õ –ü–†–û–ë–ï–õ –í –ö–û–ù–¶–ï!

function App() {
  /* - —Å–æ—Å—Ç–æ—è–Ω–∏—è - */
  const [exercises, setExercises] = useState<Exercise[]>([]);
  const [programs, setPrograms] = useState<ShortProgram[]>([]);
  const [editingProg, setEditingProg] = useState<WorkoutProgram | null>(null);
  const [history, setHistory] = useState<FinishedWorkout[]>([]);
  const [isPWA, setIsPWA] = useState(false);
  const [deferredPrompt, setDeferredPrompt] = useState<any>(null);
  
  const [secondsLeft, setSecondsLeft] = useState<number>(0);
  const [totalSeconds, setTotalSeconds] = useState<number>(0);
  const [isActive, setIsActive] = useState<boolean>(false);
  const [soundFile, setSoundFile] = useState<string>('beep.wav');
  const [startTime, setStartTime] = useState<number>(Date.now());

  /* - –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö - */
  const loadExercises = async () => {
    try {
      const res = await axios.get<Exercise[]>(`${API_URL}/exercises`); // –ò–°–ü–†–ê–í–ò–õ –ê–î–†–ï–°
      setExercises(res.data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:', err);
    }
  };

  const loadPrograms = async () => {
    try {
      const res = await axios.get<ShortProgram[]>(`${API_URL}/programs`); // –ò–°–ü–†–ê–í–ò–õ –ê–î–†–ï–°
      setPrograms(res.data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º:', err);
    }
  };

  const loadHistory = async () => {
    try {
      const res = await axios.get<FinishedWorkout[]>(`${API_URL}/workouts/history`); // –ò–°–ü–†–ê–í–ò–õ –ê–î–†–ï–°
      setHistory(res.data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', err);
    }
  };

  /* - —ç—Ñ—Ñ–µ–∫—Ç—ã - */
  useEffect(() => {
    loadExercises();
    loadPrograms();
    loadHistory();
  }, []);

  useEffect(() => {
    // –¢–∞–π–º–µ—Ä
    let interval: NodeJS.Timeout | null = null;
    if (isActive && secondsLeft > 0) {
      interval = setInterval(() => {
        setSecondsLeft(s => s - 1);
      }, 1000);
    } else if (isActive && secondsLeft === 0) {
      setIsActive(false);
      const audio = new Audio(`/sounds/${soundFile}`);
      audio.play();
    }
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isActive, secondsLeft, soundFile]);

  useEffect(() => {
    // PWA
    const handleBeforeInstallPrompt = (e: Event) => {
      e.preventDefault();
      setDeferredPrompt(e);
      setIsPWA(true);
    };
    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    };
  }, []);

  /* - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ - */
  const startTimer = (sec: number) => {
    setSecondsLeft(sec);
    setTotalSeconds(sec);
    setIsActive(true);
  };

  const resetTimer = () => {
    setIsActive(false);
    setSecondsLeft(0);
    setTotalSeconds(0);
  };

  const saveEdit = async () => {
    if (!editingProg) return;
    try {
      await axios.put(`${API_URL}/programs/${editingProg.id}`, editingProg); // –ò–°–ü–†–ê–í–ò–õ –ê–î–†–ï–°
      setEditingProg(null);
      loadPrograms();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', err);
    }
  };

  const deleteProgram = async (id: number) => {
    if (!window.confirm('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É?')) return;
    try {
      await axios.delete(`${API_URL}/programs/${id}`); // –ò–°–ü–†–ê–í–ò–õ –ê–î–†–ï–°
      loadPrograms();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', err);
    }
  };

  const finishWorkout = async () => {
    if (!exercises.length) return;
    try {
      const duration = Math.round((Date.now() - startTime) / 1000);
      const done = exercises.map(e => e.name);
      await axios.post(`${API_URL}/workouts/finish`, { // –ò–°–ü–†–ê–í–ò–õ –ê–î–†–ï–°
        finished_at: new Date().toISOString(),
        duration_sec: duration,
        exercises_done: done
      });
      loadHistory();
      resetTimer();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', err);
    }
  };

  const exportHistory = async () => {
    try {
      const res = await axios.get(`${API_URL}/export-history`, { // –ò–°–ü–†–ê–í–ò–õ –ê–î–†–ï–°
        responseType: 'blob'
      });
      const url = window.URL.createObjectURL(new Blob([res.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', 'history.csv');
      document.body.appendChild(link);
      link.click();
      link.remove();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', err);
    }
  };

  const installPWA = () => {
    if (deferredPrompt) {
      deferredPrompt.prompt();
      deferredPrompt.userChoice.then((choiceResult: any) => {
        if (choiceResult.outcome === 'accepted') {
          setIsPWA(false);
        }
        setDeferredPrompt(null);
      });
    }
  };

  /* - —Ä–∞—Å—á—ë—Ç—ã –¥–ª—è –∫—Ä—É–≥–∞ - */
  const percentage = totalSeconds ? Math.round((secondsLeft / totalSeconds) * 100) : 0;

  /* - —Ä–µ–Ω–¥–µ—Ä - */
  return (
    <div className="app-dark">
      <h1>–ú–æ—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞</h1>

      {/* –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–∞–º–º */}
      <ImportProgram onImported={() => {
        loadPrograms();
        loadExercises();
      }} />
      <hr style={{ margin: '1rem 0' }} />

      {/* –ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA */}
      {isPWA && (
        <button onClick={installPWA} style={{ 
          background: '#4CAF50', 
          color: 'white', 
          border: 'none', 
          padding: '10px 20px', 
          borderRadius: '4px',
          marginBottom: '1rem'
        }}>
          üì≤ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        </button>
      )}

      {/* –¢–∞–π–º–µ—Ä */}
      <div style={{ width: 150, height: 150, margin: '0 auto 1rem' }}>
        <CircularProgressbar 
          value={percentage} 
          text={`${secondsLeft}s`}
          styles={buildStyles({
            textSize: '16px',
            pathColor: `rgba(62, 152, 199, ${isActive ? 1 : 0.5})`,
            textColor: '#fff',
            trailColor: '#222',
          })}
        />
      </div>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–º */}
      <div style={{ display: 'flex', gap: '0.5rem', justifyContent: 'center', flexWrap: 'wrap' }}>
        <button onClick={() => startTimer(60)}>60s</button>
        <button onClick={() => startTimer(90)}>90s</button>
        <button onClick={() => startTimer(120)}>120s</button>
        <button onClick={() => startTimer(180)}>180s</button>
        <button onClick={resetTimer} style={{ background: '#f44336' }}>–°—Ç–æ–ø</button>
        <button onClick={finishWorkout} style={{ background: '#4CAF50' }}>üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å</button>
      </div>

      {/* –í—ã–±–æ—Ä –∑–≤—É–∫–∞ */}
      <label style={{ marginBottom: '1rem', display: 'block' }}>
        –ó–≤—É–∫ —Ç–∞–π–º–µ—Ä–∞:
        <select 
          value={soundFile} 
          onChange={e => setSoundFile(e.target.value)}
          style={{ marginLeft: '0.5rem' }}
        >
          <option value="beep.wav">–ë–∏–ø</option>
          <option value="gong.wav">–ì–æ–Ω–≥</option>
          <option value="voice.wav">–ì–æ–ª–æ—Å</option>
        </select>
      </label>

      {/* –°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π */}
      <h2>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è</h2>
      <ul style={{ padding: 0 }}>
        {exercises.map(ex => (
          <li key={ex.id} style={{ 
            listStyle: 'none', 
            background: '#333', 
            margin: '0.5rem 0', 
            padding: '1rem', 
            borderRadius: '4px' 
          }}>
            <h3>{ex.name}</h3>
            {ex.tip && <p>üí° {ex.tip}</p>}
            <p>{ex.sets} –ø–æ–¥—Ö–æ–¥–æ–≤ √ó {ex.reps} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π {ex.weight ? `√ó ${ex.weight} –∫–≥` : ''}</p>
            {ex.yt_search && (
              <a 
                href={`https://www.youtube.com/results?search_query=${encodeURIComponent(ex.yt_search)}`} 
                target="_blank" 
                rel="noopener noreferrer"
                style={{ color: '#4CAF50' }}
              >
                üé• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ—Ö–Ω–∏–∫—É
              </a>
            )}
          </li>
        ))}
      </ul>

      {/* –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º */}
      <h2>–ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</h2>
      <ul style={{ padding: 0 }}>
        {programs.map(p => (
          <li key={p.id} style={{ 
            listStyle: 'none', 
            background: '#333', 
            margin: '0.5rem 0', 
            padding: '1rem', 
            borderRadius: '4px',
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center'
          }}>
            <span>{p.title} ({p.ex_count})</span>
            <div>
              <button onClick={async () => {
                try {
                  const full = await axios.get<WorkoutProgram>(`${API_URL}/programs/${p.id}`); // –ò–°–ü–†–ê–í–ò–õ –ê–î–†–ï–°
                  setEditingProg(full.data);
                } catch (err) {
                  console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:', err);
                }
              }}>‚úèÔ∏è</button>
              <button onClick={() => deleteProgram(p.id)}>üóëÔ∏è</button>
            </div>
          </li>
        ))}
      </ul>

      {/* –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ */}
      <h2>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</h2>
      <button onClick={exportHistory} style={{ marginBottom: '1rem' }}>üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV</button>
      <ul style={{ padding: 0 }}>
        {history.map(w => (
          <li key={w.id} style={{ 
            listStyle: 'none', 
            background: '#333', 
            margin: '0.5rem 0', 
            padding: '1rem', 
            borderRadius: '4px' 
          }}>
            <p>üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {new Date(w.finished_at).toLocaleString()}</p>
            <p>‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {w.duration_sec} —Å–µ–∫</p>
            <p>üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {w.exercises_done.join(', ')}</p>
          </li>
        ))}
      </ul>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {editingProg && (
        <dialog open style={{ 
          position: 'fixed', 
          top: '50%', 
          left: '50%', 
          transform: 'translate(-50%, -50%)',
          background: '#222',
          color: 'white',
          padding: '1rem',
          border: '1px solid #444',
          borderRadius: '4px',
          maxWidth: '90vw',
          width: '400px'
        }}>
          <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É</h2>
          <label>
            –ù–∞–∑–≤–∞–Ω–∏–µ:
            <input 
              type="text" 
              value={editingProg.title}
              onChange={e => setEditingProg({ ...editingProg, title: e.target.value })}
              style={{ width: '100%', margin: '0.5rem 0' }}
            />
          </label>
          <br />
          <label>
            –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (JSON):
            <textarea
              value={JSON.stringify(editingProg.exercises, null, 2)}
              onChange={e => {
                try {
                  const arr = JSON.parse(e.target.value);
                  setEditingProg({ ...editingProg, exercises: arr });
                } catch {
                  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                }
              }}
              rows={6}
              style={{ width: '100%', margin: '0.5rem 0' }}
            />
          </label>
          <br />
          <button onClick={saveEdit} style={{ background: '#4CAF50', color: 'white' }}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
          <button onClick={() => setEditingProg(null)} style={{ background: '#f44336', color: 'white', marginLeft: '0.5rem' }}>–û—Ç–º–µ–Ω–∞</button>
        </dialog>
      )}
    </div>
  );
}

export default App;